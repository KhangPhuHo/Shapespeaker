// üëâ T√°ch h√†m ra ƒë·ªÉ d·ªÖ d√πng l·∫°i
function extractEntities(entities) {
  return {
    product: entities['product:product']?.[0]?.value || null,
    quantity: entities['wit$number:number']?.[0]?.value || null,
    category: entities['category:category']?.[0]?.value || null,
  };
}

async function getWitResponse(input) {
  try {
    const res = await fetch("https://shapespeaker.onrender.com/wit/message", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({ input }),
    });
    const data = await res.json();

    let intent = 'none';
    if (data.intents && data.intents.length > 0) {
      intent = data.intents[0].name;
    }

    const entities = data.entities || {};
    const { product, quantity, category } = extractEntities(entities);

    // ‚úÖ C·∫≠p nh·∫≠t context n·∫øu c√≥ d·ªØ li·ªáu m·ªõi
    if (product) conversationContext.lastProduct = product;
    if (quantity) conversationContext.lastQuantity = quantity;
    conversationContext.lastIntent = intent;

    switch (intent) {
      case 'greeting':
        return 'Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?';

      case 'ask_product':
        try {
          const witServerRes = await fetch("https://shapespeaker.onrender.com/wit/get-product-info", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
          });
          const witData = await witServerRes.json();
          return witData.reply;
        } catch (error) {
          console.error("‚ùå L·ªói g·ªçi server:", error);
          return "Xin l·ªói, kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m l√∫c n√†y.";
        }

      case 'products_by_category':
        try {
          const witServerRes = await fetch("https://shapespeaker.onrender.com/wit/products-by-category", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ input, entities }),
          });
          const witData = await witServerRes.json();
          return witData.reply;
        } catch (error) {
          console.error("‚ùå L·ªói g·ªçi server:", error);
          return "Xin l·ªói, kh√¥ng th·ªÉ l·∫•y s·∫£n ph·∫©m theo danh m·ª•c l√∫c n√†y.";
        }

      case 'get_price_of_product':
        try {
          const witServerRes = await fetch("https://shapespeaker.onrender.com/wit/product-price", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              input,
              entities,
              fallbackProduct: conversationContext.lastProduct,
            }),
          });
          const witData = await witServerRes.json();
          return witData.reply;
        } catch (error) {
          console.error("‚ùå L·ªói l·∫•y gi√°:", error);
          return "Xin l·ªói, kh√¥ng th·ªÉ l·∫•y gi√° s·∫£n ph·∫©m l√∫c n√†y.";
        }

      case 'check_stock':
        try {
          const witServerRes = await fetch("https://shapespeaker.onrender.com/wit/check-stock", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              input,
              entities,
              fallbackProduct: conversationContext.lastProduct,
              fallbackQuantity: conversationContext.lastQuantity,
            }),
          });
          const witData = await witServerRes.json();
          return witData.reply;
        } catch (error) {
          console.error("‚ùå L·ªói ki·ªÉm tra t·ªìn kho:", error);
          return "Xin l·ªói, kh√¥ng th·ªÉ ki·ªÉm tra t·ªìn kho l√∫c n√†y.";
        }

      case 'compare_price':
        try {
          const witServerRes = await fetch("https://shapespeaker.onrender.com/wit/compare-price", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ input }),
          });
          const witData = await witServerRes.json();
          return witData.reply;
        } catch (error) {
          console.error("‚ùå L·ªói so s√°nh gi√°:", error);
          return "Xin l·ªói, kh√¥ng th·ªÉ so s√°nh gi√° l√∫c n√†y.";
        }

      case 'buy_product':
        if (conversationContext.lastProduct && conversationContext.lastQuantity) {
          return `‚úÖ ƒê√£ ghi nh·∫≠n b·∫°n mu·ªën mua ${conversationContext.lastQuantity} c√°i ${conversationContext.lastProduct}. Vui l√≤ng v√†o trang chi ti·∫øt ƒë·ªÉ ho√†n t·∫•t.`;
        }
        return 'V·∫≠y b·∫°n h√£y ch·ªçn v√†o s·∫£n ph·∫©m, sau ƒë√≥ ch·ªçn v√†o n√∫t mua ngay ho·∫∑c gi·ªè h√†ng, th√™m th√¥ng tin l√† ƒë∆∞·ª£c';

      case 'ask_features':
        return 'T√¥i c√≥ ch·ª©c nƒÉng tr√≤ chuy·ªán, gi·∫£i ƒë√°p c√°c th·∫Øc m·∫Øc c·ªßa b·∫°n v·ªÅ s·∫£n ph·∫©m v√† d·ªãch v·ª• b√™n ch√∫ng t√¥i';

      case 'thank':
        return 'C·∫£m ∆°n b·∫°n v√¨ ƒë√£ tin t∆∞·ªüng d·ªãch v·ª• b√™n m√¨nh';

      case 'goodbye':
        return 'C·∫£m ∆°n b·∫°n, h·∫πn g·∫∑p l·∫°i!';

      default:
        return 'T√¥i ch∆∞a hi·ªÉu r√µ √Ω b·∫°n, b·∫°n c√≥ th·ªÉ n√≥i l·∫°i kh√¥ng?';
    }

  } catch (error) {
    console.error('L·ªói g·ªçi Wit.ai:', error);
    return 'Xin l·ªói, c√≥ l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.';
  }
}

// üîê Wit proxy: g·ªçi Wit API t·ª´ backend ƒë·ªÉ gi·∫•u token
app.post("/wit/message", async (req, res) => {
  const { input } = req.body;

  if (!input) {
    return res.status(400).json({ error: "Thi·∫øu input" });
  }

  try {
    const response = await fetch(`https://api.wit.ai/message?v=20230616&q=${encodeURIComponent(input)}`, {
      headers: {
        Authorization: `Bearer ${process.env.WIT_ACCESS_TOKEN}`,
      },
    });

    const data = await response.json();
    return res.json(data);

  } catch (error) {
    console.error("‚ùå L·ªói g·ªçi Wit.ai:", error);
    return res.status(500).json({ error: "L·ªói khi g·ªçi Wit.ai" });
  }
});