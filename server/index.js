require("dotenv").config();
const express = require("express");
const fs = require("fs");
const cors = require("cors");
const upload = require("./middleware/multer"); // ƒê√£ c·∫•u h√¨nh gi·ªõi h·∫°n 150MB v√† l·ªçc MIME
const cloudinary = require("./utils/cloudinary");
const admin = require("firebase-admin");

const app = express();
const PORT = process.env.PORT || 3000;
const SUPER_ADMIN_UID = "J1RINivGZFgXKTWfGRe4ITU3BGz2";

// ‚úÖ Kh·ªüi t·∫°o Firebase Admin SDK
admin.initializeApp({
  credential: admin.credential.cert({
    type: process.env.FIREBASE_TYPE,
    project_id: process.env.FIREBASE_PROJECT_ID,
    private_key_id: process.env.FIREBASE_PRIVATE_KEY_ID,
    private_key: process.env.FIREBASE_PRIVATE_KEY.replace(/\\n/g, '\n'),
    client_email: process.env.FIREBASE_CLIENT_EMAIL,
    client_id: process.env.FIREBASE_CLIENT_ID,
    auth_uri: process.env.FIREBASE_AUTH_URI,
    token_uri: process.env.TOKEN_URI,
    auth_provider_x509_cert_url: process.env.FIREBASE_AUTH_PROVIDER_X509_CERT_URL,
    client_x509_cert_url: process.env.FIREBASE_CLIENT_X509_CERT_URL,
  }),
});

// ‚úÖ CORS: Cho ph√©p frontend truy c·∫≠p API
app.use(cors({
  origin: [
    "http://localhost:5500",
    "http://127.0.0.1:5500",
    "https://shapespeaker.vercel.app"
  ],
  methods: ["GET", "POST", "DELETE", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization", "Origin", "Accept"],
  credentials: true,
}));

// ‚úÖ B·∫Øt t·∫•t c·∫£ OPTIONS request ƒë·ªÉ kh√¥ng b·ªã block b·ªüi preflight
app.options("*", cors());

app.use(express.json());

// ‚úÖ Route test
app.get("/", (req, res) => {
  res.send("‚úÖ API ƒëang ho·∫°t ƒë·ªông. S·ª≠ d·ª•ng /upload ho·∫∑c /deleteUser.");
});

// ‚úÖ Upload ·∫£nh/video l√™n Cloudinary
app.post("/upload", (req, res) => {
  upload.single("media")(req, res, function (err) {
    // üî¥ File qu√° l·ªõn
    if (err?.code === "LIMIT_FILE_SIZE") {
      return res.status(413).json({
        success: false,
        message: "‚ùå File qu√° l·ªõn. Gi·ªõi h·∫°n l√† 150MB.",
      });
    }

    // üî¥ ƒê·ªãnh d·∫°ng kh√¥ng h·ª£p l·ªá ho·∫∑c l·ªói kh√°c
    if (err) {
      return res.status(400).json({
        success: false,
        message: "‚ùå Kh√¥ng th·ªÉ upload file: " + err.message,
      });
    }

    // üî¥ Kh√¥ng c√≥ file n√†o
    if (!req.file) {
      return res.status(400).json({ success: false, message: "‚ùå Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c g·ª≠i." });
    }

    console.log("üü¢ Nh·∫≠n file:", req.file.originalname);

    cloudinary.uploader.upload(req.file.path, {
      resource_type: "auto", // ‚úÖ Cho ph√©p Cloudinary t·ª± nh·∫≠n di·ªán ·∫£nh/video
    }, (err, result) => {
      // ‚úÖ Xo√° file t·∫°m (d√π c√≥ l·ªói hay kh√¥ng)
      fs.unlink(req.file.path, () => { });

      if (err) {
        console.error("‚ùå L·ªói Cloudinary:", err);
        return res.status(500).json({ success: false, message: "‚ùå Upload th·∫•t b·∫°i." });
      }

      return res.status(200).json({
        success: true,
        message: "‚úÖ Upload th√†nh c√¥ng!",
        data: result,
      });
    });
  });
});

// üîê Proxy g·ªçi Wit.ai API ƒë·ªÉ gi·∫•u token v√† ph√¢n t√≠ch th√¥ng minh h∆°n
app.post("/wit/message", async (req, res) => {
  const { input } = req.body;

  if (!input || typeof input !== 'string') {
    return res.status(400).json({ error: "‚ùå Thi·∫øu ho·∫∑c sai ƒë·ªãnh d·∫°ng input" });
  }

  try {
    const witURL = `https://api.wit.ai/message?v=20230616&q=${encodeURIComponent(input)}&n=3&verbose=true&include=all`;

    const response = await fetch(witURL, {
      headers: {
        Authorization: `Bearer ${process.env.WIT_ACCESS_TOKEN}`,
        "Content-Type": "application/json"
      },
    });

    const data = await response.json();

    // üîç Ghi log ƒë·ªÉ theo d√µi d·ªÖ hu·∫•n luy·ªán th√™m
    console.log("üß† [Wit.ai] Text:", data.text);
    console.log("‚û°Ô∏è Intents:", data.intents?.map(i => `${i.name} (${i.confidence})`).join(", ") || "None");
    console.log("üîé Entities:", JSON.stringify(data.entities || {}, null, 2));

    const topIntent = data.intents?.[0];
    const confidence = topIntent?.confidence || 0;

    const responsePayload = {
      text: data.text,
      intent: topIntent?.name || "unknown",
      confidence,
      entities: data.entities || {},
    };

    // ‚ö†Ô∏è N·∫øu ƒë·ªô tin c·∫≠y th·∫•p, th√™m c·∫£nh b√°o
    if (confidence < 0.4) {
      console.warn("‚ö†Ô∏è Confidence th·∫•p:", confidence);
      responsePayload.warning = "‚ö†Ô∏è ƒê√¢y l√† d·ª± ƒëo√°n v·ªõi ƒë·ªô tin c·∫≠y th·∫•p, c√≥ th·ªÉ kh√¥ng ƒë√∫ng √Ω b·∫°n.";
    }

    return res.json(responsePayload);

  } catch (error) {
    console.error("‚ùå L·ªói g·ªçi Wit.ai:", error);
    return res.status(500).json({ error: "‚ùå L·ªói khi g·ªçi Wit.ai" });
  }
});

// ‚úÖ /wit/get-product-info - gi·∫£ s·ª≠ tr·∫£ 3 s·∫£n ph·∫©m n·ªïi b·∫≠t
app.post("/wit/get-product-info", async (req, res) => {
  try {
    console.log("üì• Nh·∫≠n request /wit/get-product-info");

    const snapshot = await admin.firestore()
      .collection("shapespeakitems")
      .orderBy("createdAt", "desc")
      .limit(3)
      .get();

    if (snapshot.empty) {
      console.warn("‚ö†Ô∏è Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o");
      const reply = "Hi·ªán ch∆∞a c√≥ s·∫£n ph·∫©m n√†o trong h·ªá th·ªëng.";
      return res.json({ reply });
    }

    const products = [];
    snapshot.forEach(doc => {
      const d = doc.data();
      const name = d.name || "Kh√¥ng r√µ t√™n";
      const price = typeof d.price === 'number' ? `${d.price} VND` : "Kh√¥ng r√µ gi√°";
      products.push(`${name} - ${price}`);
    });

    const reply = `üì¶ M·ªôt s·ªë s·∫£n ph·∫©m b√™n m√¨nh:\n- ${products.join('\n- ')}\nB·∫°n c√≥ th·ªÉ g√µ t√™n s·∫£n ph·∫©m ho·∫∑c ch·ªçn tr·ª±c ti·∫øp ƒë·ªÉ xem th√™m nh√©.`;
    console.log("‚úÖ Tr·∫£ v·ªÅ:", reply);

    return res.json({ reply });

  } catch (error) {
    console.error("‚ùå L·ªói get-product-info:", error);
    return res.status(500).json({ reply: "‚ùå Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s·∫£n ph·∫©m." });
  }
});

// ‚úÖ /wit/products-by-category - h·ªó tr·ª£ entity category
app.post("/wit/products-by-category", async (req, res) => {
  const { input, entities } = req.body;
  if (!input) return res.status(400).json({ reply: "‚ùå Thi·∫øu n·ªôi dung c√¢u h·ªèi." });

  try {
    const knownCategories = ['ƒë·ªì ch∆°i', 'gi√°o d·ª•c', 'to√°n', 'th·∫ª'];
    const inputLower = input.toLowerCase();
    const entityCategory = entities?.['category:category']?.[0]?.value?.toLowerCase();
    let matchedCategory = entityCategory || knownCategories.find(cat => inputLower.includes(cat));

    if (!matchedCategory) {
      return res.json({ reply: "‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c danh m·ª•c t·ª´ c√¢u h·ªèi. B·∫°n th·ª≠ n√≥i r√µ h∆°n nh√©." });
    }

    const snap = await admin.firestore().collection("shapespeakitems")
      .where("category", "array-contains", matchedCategory)
      .get();

    if (snap.empty) {
      return res.json({ reply: `‚ùå Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o thu·ªôc danh m·ª•c "${matchedCategory}".` });
    }

    const productList = [];
    snap.forEach(doc => {
      const d = doc.data();
      productList.push(`${d.name} (${d.price.toLocaleString()} VND)`);
    });

    return res.json({
      reply: `üßæ C√°c s·∫£n ph·∫©m thu·ªôc danh m·ª•c "${matchedCategory}":\n- ${productList.slice(0, 3).join('\n- ')}`
    });

  } catch (error) {
    console.error("‚ùå L·ªói truy v·∫•n theo category:", error);
    return res.status(500).json({ reply: "‚ùå C√≥ l·ªói khi t√¨m theo danh m·ª•c." });
  }
});

// ‚úÖ /wit/product-price - h·ªó tr·ª£ entity product
app.post("/wit/product-price", async (req, res) => {
  const { input, entities } = req.body;
  if (!input) return res.status(400).json({ reply: "‚ùå Thi·∫øu n·ªôi dung c√¢u h·ªèi." });

  try {
    const normalizedInput = input.toLowerCase();
    const snapshot = await admin.firestore().collection("shapespeakitems").get();

    const entityProduct = entities?.product?.[0]?.value?.toLowerCase();
    let matchedProduct = null;

    snapshot.forEach(doc => {
      const data = doc.data();
      const productName = data.name?.toLowerCase();
      if (productName && (normalizedInput.includes(productName) || (entityProduct && productName.includes(entityProduct)))) {
        matchedProduct = { ...data, id: doc.id };
      }
    });

    if (!matchedProduct) {
      return res.json({ reply: "‚ùå M√¨nh kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m b·∫°n ƒëang h·ªèi. Vui l√≤ng ki·ªÉm tra l·∫°i t√™n nh√©." });
    }

    return res.json({
      reply: `üîç Gi√° c·ªßa ${matchedProduct.name} l√† ${matchedProduct.price.toLocaleString()} VND.`,
      productId: matchedProduct.id
    });

  } catch (error) {
    console.error("‚ùå L·ªói x·ª≠ l√Ω h·ªèi gi√°:", error);
    return res.status(500).json({ reply: "‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m gi√° s·∫£n ph·∫©m." });
  }
});

// ‚úÖ /wit/check-stock - h·ªó tr·ª£ entity product & quantity
app.post("/wit/check-stock", async (req, res) => {
  const { input, entities } = req.body;
  if (!input) return res.status(400).json({ reply: "‚ùå Thi·∫øu n·ªôi dung ƒë·ªÉ ki·ªÉm tra t·ªìn kho." });

  try {
    const normalized = input.toLowerCase();
    const snapshot = await admin.firestore().collection("shapespeakitems").get();

    const entityProduct = entities?.product?.[0]?.value?.toLowerCase();
    const entityQty = entities?.['wit$number:quantity']?.[0]?.value;
    let askedQty = entityQty ? parseInt(entityQty) : null;

    // fallback n·∫øu entity kh√¥ng c√≥
    if (!askedQty) {
      const quantityMatch = input.match(/\b(\d+)\b/);
      askedQty = quantityMatch ? parseInt(quantityMatch[1]) : null;
    }

    let matchedProduct = null;
    snapshot.forEach(doc => {
      const data = doc.data();
      const name = data.name?.toLowerCase();
      if (name && (normalized.includes(name) || (entityProduct && name.includes(entityProduct)))) {
        matchedProduct = data;
      }
    });

    if (!matchedProduct) {
      return res.json({ reply: "‚ùå Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra t·ªìn kho." });
    }

    if (askedQty !== null) {
      if (matchedProduct.stock >= askedQty) {
        return res.json({ reply: `‚úÖ C√≥ ƒë·ªß ${askedQty} c√°i "${matchedProduct.name}". Hi·ªán c√≤n ${matchedProduct.stock} c√°i.` });
      } else {
        return res.json({ reply: `‚ùå Hi·ªán ch·ªâ c√≤n ${matchedProduct.stock} c√°i "${matchedProduct.name}", kh√¥ng ƒë·ªß ${askedQty} c√°i.` });
      }
    }

    const reply = matchedProduct.stock > 0
      ? `‚úÖ S·∫£n ph·∫©m "${matchedProduct.name}" hi·ªán c√≤n ${matchedProduct.stock} c√°i.`
      : `‚ùå S·∫£n ph·∫©m "${matchedProduct.name}" hi·ªán ƒë√£ h·∫øt h√†ng.`;

    return res.json({ reply });

  } catch (error) {
    console.error("‚ùå L·ªói ki·ªÉm tra t·ªìn kho:", error);
    return res.status(500).json({ reply: "‚ùå L·ªói khi ki·ªÉm tra t·ªìn kho." });
  }
});

// ‚úÖ /wit/compare-price - h·ªó tr·ª£ entity product
app.post("/wit/compare-price", async (req, res) => {
  const { input, entities } = req.body;
  if (!input) return res.status(400).json({ reply: "‚ùå Thi·∫øu n·ªôi dung ƒë·ªÉ so s√°nh." });

  try {
    const normalized = input.toLowerCase();
    const snapshot = await admin.firestore().collection("shapespeakitems").get();

    const productNames = entities?.product?.map(p => p.value.toLowerCase()) || [];
    const matched = [];

    snapshot.forEach(doc => {
      const data = doc.data();
      const name = data.name?.toLowerCase();
      if (name && (normalized.includes(name) || productNames.some(p => name.includes(p)))) {
        matched.push(data);
      }
    });

    if (matched.length < 2) {
      return res.json({ reply: "‚ùå C·∫ßn √≠t nh·∫•t 2 s·∫£n ph·∫©m ƒë·ªÉ so s√°nh gi√°." });
    }

    const [a, b] = matched.slice(0, 2);
    let result = `üí∏ Gi√° c·ªßa \"${a.name}\" l√† ${a.price.toLocaleString()} VND.\nüì¶ Gi√° c·ªßa \"${b.name}\" l√† ${b.price.toLocaleString()} VND.\n`;

    result += a.price === b.price
      ? "üü∞ Hai s·∫£n ph·∫©m c√≥ c√πng m·ª©c gi√°."
      : `üîª \"${a.price < b.price ? a.name : b.name}\" c√≥ gi√° r·∫ª h∆°n.`;

    return res.json({ reply: result });

  } catch (error) {
    console.error("‚ùå L·ªói so s√°nh gi√°:", error);
    return res.status(500).json({ reply: "‚ùå L·ªói khi so s√°nh gi√° s·∫£n ph·∫©m." });
  }
});

// ‚úÖ Xo√° user trong Firebase Auth + Firestore
app.post("/deleteUser", async (req, res) => {
  const { requesterUid, targetUid } = req.body;

  if (requesterUid !== SUPER_ADMIN_UID) {
    return res.status(403).json({ error: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y." });
  }

  if (targetUid === SUPER_ADMIN_UID) {
    return res.status(400).json({ error: "‚ùå Kh√¥ng th·ªÉ xo√° ADMIN G·ªêC." });
  }

  try {
    await admin.auth().deleteUser(targetUid);
    await admin.firestore().collection("users").doc(targetUid).delete();
    return res.json({ message: `‚úÖ ƒê√£ xo√° t√†i kho·∫£n ${targetUid}` });
  } catch (error) {
    console.error("‚ùå L·ªói khi xo√° t√†i kho·∫£n:", error);
    return res.status(500).json({ error: "‚ùå L·ªói khi xo√° t√†i kho·∫£n: " + error.message });
  }
});

// ‚úÖ Kh·ªüi ƒë·ªông server
app.listen(PORT, () => {
  console.log(`üöÄ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});
